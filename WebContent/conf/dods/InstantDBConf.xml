<?xml version="1.0" encoding="UTF-8"?>
<dodsConf>
<!-- =======================================================================================
        
 DODS InstantDB database vendor configuration file.

 ======================================================================================== -->

<!--
 The Database type and JDBC type used to store ObjectId's
-->
    <OidDbType>DECIMAL (19,0)</OidDbType>
    <OidJdbcType>BigDecimal</OidJdbcType>
        
<!--
 The OidDbColumnName, VersionDbColumnName are used for generating the SQL CREATE TABLE
 statements in the create_tables.sql and <classname>SQL.sql files
-->
    <OidDbColumnName>oid</OidDbColumnName>
    <VersionDbColumnName>version</VersionDbColumnName>
        
<!--
 Some vendors support the ON DELETE CASCADE row attribute.
 So if DODS generates .sql files containing the following table definitions:
    create table dept     ( deptid INT );
    create table employee ( deptid INT REFERENCES(dept) ON DELETE CASCADE );
 then deleting a dept row will cause the deletion of employee rows
 which refer to that dept.
 This saves having to write the most common of database triggers.
-->
    <DeleteCascade>false</DeleteCascade>

<!--
 Some vendors support named referential constraints.
 So if DODS generates .sql files containing the following table definitions:
    create table dept     ( deptid INT );
    create table employee ( 
                  deptid INT CONSTRAINT emp_refs_dept REFERENCES(dept) );
 then if an employee row is committed with an invalid deptid 
 the error will report a problem with constraint 'emp_refs_dept'
 rather than some unhelpful constraint name chosen by the database.
-->
    <NamedConstraint>false</NamedConstraint>

<!--
 The StringQuoteCharacter was added by Chris Ryan (cryan@plugged.net.au).
 There does not appear to be a standard string quote character amongst
 the DB vendors.  Most appear to support ["] but Sybase really objects
 to this.  It requires ['].
-->
    <StringQuoteCharacter>"</StringQuoteCharacter>
    <CommentStart>NONE</CommentStart>
    <CommentEnd>NONE</CommentEnd>

<!--
 Like and Wildcard support.
-->
    <LikeKeyword>LIKE</LikeKeyword>
    <Wildcard>%</Wildcard>

<!--
 Here we map JDBC types to vendor-specific data types.

 For almost all vendors, the JDBC types BIT, TINYINT, SMALLINT and BIGINT
 are mapped to the data type INTEGER.
 For most vendors, these types are actually INTEGER.
 The following entries can be changed to impose size restrictions.
 For example, to specify an actual size for a TINYINT, make the change:
       Database.JDBCtype.TINYINT.Oracle=       "DECIMAL(4,0)"
 Note that the "set" methods in the DO classes generated by DODS
 do not test for size restrictions on integer values.
 So, altering the mappings here requires additional range checking
 in the business logic of the classes using the DOs.
-->
    <JDBCtype>
        <BIT>INTEGER</BIT>
        <TINYINT>INTEGER</TINYINT>
        <SMALLINT>INTEGER</SMALLINT>
        <INTEGER>INTEGER</INTEGER>
        <BIGINT>INTEGER</BIGINT>
        <REAL>FLOAT</REAL>
        <FLOAT>FLOAT</FLOAT>
        <DOUBLE>FLOAT</DOUBLE>
        <NUMERIC>NUMERIC</NUMERIC>
        <DECIMAL>DECIMAL</DECIMAL>
        <CHAR>CHAR</CHAR>
        <VARCHAR>VARCHAR</VARCHAR>
        <LONGVARCHAR>NONE</LONGVARCHAR>
        <BINARY>NONE</BINARY>
        <VARBINARY>NONE</VARBINARY>
        <LONGVARBINARY>NONE</LONGVARBINARY>
        <DATE>DATE</DATE>
        <TIME>TIME</TIME>
        <TIMESTAMP>TIMESTAMP</TIMESTAMP>
    </JDBCtype>
</dodsConf>
